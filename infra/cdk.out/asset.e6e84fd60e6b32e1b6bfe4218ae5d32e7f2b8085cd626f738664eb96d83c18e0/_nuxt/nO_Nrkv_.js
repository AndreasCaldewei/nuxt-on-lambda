import{a as b,X as u,r as _,Y as B,Z as O,$ as M,a0 as V,G as E,a1 as P,a2 as H,a3 as w,I as S,a4 as x,a5 as N,v as R,B as z,y as T,M as j,x as F,t as I}from"./lJpntXPr.js";const K=s=>s==="defer"||s===!1;function $(...s){var g;const r=typeof s[s.length-1]=="string"?s.pop():void 0;typeof s[0]!="string"&&s.unshift(r);let[e,l,a={}]=s;if(typeof e!="string")throw new TypeError("[nuxt] [asyncData] key must be a string.");if(typeof l!="function")throw new TypeError("[nuxt] [asyncData] handler must be a function.");const t=b(),m=l,h=()=>u.value,D=()=>t.isHydrating?t.payload.data[e]:t.static.data[e];a.server=a.server??!0,a.default=a.default??h,a.getCachedData=a.getCachedData??D,a.lazy=a.lazy??!1,a.immediate=a.immediate??!0,a.deep=a.deep??u.deep,a.dedupe=a.dedupe??"cancel";const f=()=>a.getCachedData(e,t)!=null;if(!t._asyncData[e]||!a.immediate){(g=t.payload._errors)[e]??(g[e]=u.errorValue);const i=a.deep?_:B;t._asyncData[e]={data:i(a.getCachedData(e,t)??a.default()),pending:_(!f()),error:O(t.payload._errors,e),status:_("idle"),_default:a.default}}const n={...t._asyncData[e]};delete n._default,n.refresh=n.execute=(i={})=>{if(t._asyncDataPromises[e]){if(K(i.dedupe??a.dedupe))return t._asyncDataPromises[e];t._asyncDataPromises[e].cancelled=!0}if((i._initial||t.isHydrating&&i._initial!==!1)&&f())return Promise.resolve(a.getCachedData(e,t));n.pending.value=!0,n.status.value="pending";const d=new Promise((c,o)=>{try{c(m(t))}catch(y){o(y)}}).then(async c=>{if(d.cancelled)return t._asyncDataPromises[e];let o=c;a.transform&&(o=await a.transform(c)),a.pick&&(o=U(o,a.pick)),t.payload.data[e]=o,n.data.value=o,n.error.value=u.errorValue,n.status.value="success"}).catch(c=>{if(d.cancelled)return t._asyncDataPromises[e];n.error.value=H(c),n.data.value=w(a.default()),n.status.value="error"}).finally(()=>{d.cancelled||(n.pending.value=!1,delete t._asyncDataPromises[e])});return t._asyncDataPromises[e]=d,t._asyncDataPromises[e]},n.clear=()=>G(t,e);const p=()=>n.refresh({_initial:!0}),C=a.server!==!1&&t.payload.serverRendered;{const i=S();if(i&&!i._nuxtOnBeforeMountCbs){i._nuxtOnBeforeMountCbs=[];const o=i._nuxtOnBeforeMountCbs;M(()=>{o.forEach(y=>{y()}),o.splice(0,o.length)}),V(()=>o.splice(0,o.length))}C&&t.isHydrating&&(n.error.value||f())?(n.pending.value=!1,n.status.value=n.error.value?"error":"success"):i&&(t.payload.serverRendered&&t.isHydrating||a.lazy)&&a.immediate?i._nuxtOnBeforeMountCbs.push(p):a.immediate&&p();const d=x();if(a.watch){const o=E(a.watch,()=>n.refresh());d&&P(o)}const c=t.hook("app:data:refresh",async o=>{(!o||o.includes(e))&&await n.refresh()});d&&P(c)}const v=Promise.resolve(t._asyncDataPromises[e]).then(()=>n);return Object.assign(v,n),v}function G(s,r){r in s.payload.data&&(s.payload.data[r]=void 0),r in s.payload._errors&&(s.payload._errors[r]=u.errorValue),s._asyncData[r]&&(s._asyncData[r].data.value=void 0,s._asyncData[r].error.value=u.errorValue,s._asyncData[r].pending.value=!1,s._asyncData[r].status.value="idle"),r in s._asyncDataPromises&&(s._asyncDataPromises[r]&&(s._asyncDataPromises[r].cancelled=!0),s._asyncDataPromises[r]=void 0)}function U(s,r){const e={};for(const l of r)e[l]=s[l];return e}const X=F("div",null,"Hello i am ssr",-1),Z={__name:"index",async setup(s){let r,e;const{data:l,status:a,error:t,refresh:m,clear:h}=([r,e]=N(()=>$("mountains",()=>$fetch("/api/test"))),r=await r,e(),r);return(D,f)=>(I(),R(j,null,[X,z(" "+T(w(l)),1)],64))}};export{Z as default};
